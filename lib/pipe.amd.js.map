{"version":3,"sources":["pipe.es6"],"names":[],"mappings":";AAAA,gBAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBb,QAAM,EAAE,GAAG,IAAI,CAAC;AAChB,QAAM,YAAY,GAAG,GAAG,CAAC;AACzB,QAAM,OAAO,GAAG,IAAI,CAAC;;AAErB,QAAI,MAAM,GAAG,UAZL,YAAY,GAYO,CAAC;AAC5B,QAAI,EAAE,GAAG,2BAAS,MAAM,CAAC,CAAC;;AAE1B,UAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;;AAEvB,QAAI,UAAU,GAAG,EAAE,CAAC;;AAEpB,QAAI,IAAI,GAAG,SAAP,IAAI,GAAS,EAAE,CAAC;;AAEpB,QAAI,aAAa,GAAG,SAAhB,aAAa,CAAI,OAAO,EAAK;AAC7B,kBAAU,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,OAAK,OAAO,CAAG,CAAC;KAC9C,CAAC;;AAEF,QAAI,KAAI,GAAG,cAAC,QAAQ,EAAK;AACrB,gBAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;mBAAI,aAAa,CAAC,OAAO,CAAC;SAAA,CAAC,CAAC;;AAEpD,mBAvBI,gBAAgB,EAuBP,UAAC,IAAI,EAAK;AACnB,gBAAI,CAAC,IAAI,EAAE;AAAC,uBAAO;aAAC;;AAEpB,gBAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzC,gBAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;;AAE3B,gBAAI,CAAC,MAAM,EAAE;AAAC,uBAAO;aAAC;;AAEtB,gBAAI,UAAU,CAAC,MAAM,CAAC,EAAE;AACpB,8DAA0B,MAAM,OAAI,CAAC;;AAErC,0BAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;aACrD;SACJ,CAAC,CAAC;;;;AAIH,aAAI,GAAG,IAAI,CAAC;KACf,CAAC;;YAEM,IAAI,GAAJ,KAAI","file":"pipe.amd.js","sourcesContent":["'use strict';\n\n/*\n *  ______                     _________\n *  ___  /_____________ _____________  /\n *  __  __ \\  __ \\  __ `/_  ___/  __  /\n *  _  /_/ / /_/ / /_/ /_  /   / /_/ /\n *  /_.___/\\____/\\__,_/ /_/    \\__,_/\n *      a minimalist dashboard and monitoring solution.\n *\n * This program is distributed under the terms of the MIT license.\n * Please see `LICENSE.md` file for details.\n *\n * Send your comments and suggestions toâ€¦\n * <https://github.com/v0lkan/board/issues>\n */\n\nimport {createServer} from 'http';\nimport {exists, readFile} from 'fs';\nimport {join} from 'path';\nimport socketIo from 'socket.io';\n\nimport {createPullSocket as createSocket} from './queue';\nimport log from './log';\n\nconst OK = 'OK';\nconst HTTP_SUCCESS = 200;\nconst IO_PORT = 4242;\n\nlet server = createServer();\nlet io = socketIo(server);\n\nserver.listen(IO_PORT);\n\nlet namespaces = {};\n\nlet noop = () => {};\n\nlet createChannel = (channel) => {\n    namespaces[channel] = io.of(`/${channel}`);\n};\n\nlet init = (channels) => {\n    channels.forEach(channel => createChannel(channel));\n\n    createSocket((data) => {\n        if (!data) {return;}\n\n        let parsed = JSON.parse(data.toString());\n        let target = parsed.target;\n\n        if (!target) {return;}\n\n        if (namespaces[target]) {\n            log(`Emitting data for \"${target}\"`);\n\n            namespaces[target].emit('board', data.toString());\n        }\n    });\n\n    // init is like a constructor function; or \"like\" a static initializer;\n    // therefore it should be called only once.\n    init = noop;\n};\n\nexport {init};\n\n\n// targets: channels\n//\n// /dashboards/hello\n// /dashboards/world\n// /dashboards/all\n\n// TODO: creating a single socket server will mean pushing the data of all\n// the job to everybody through HTTP, that's not ideal. Find a better way.\n// use socket.io namespaces probably as it's the easiest to implement.\n\n// TODO: hack on a documentation generator project.\n// why?\n// javadoc style documentation is not good enough for javascript.\n// the best documentation should be inline with the source code; however\n// no one wants to read the private parts of the source in the docs.\n// so make a parser that reads the file, and creates markdown doc files\n// between delimeters like <!--begindoc--> <!--enddoc--> for instance.\n// the app should be able to parse  @param tags into a nicely laid out\n// definition list, and it should consider all documentation comments\n// as markdown.\n\n// TODO: something reads the config json and creates the /public folder.\n\n//let sock = createSocket((data) => {\n//    log('SOCKET: incoming data', data);\n//});\n\n//let handler = (req, res) => {\n//\n//};\n"]}