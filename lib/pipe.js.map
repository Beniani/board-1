{"version":3,"sources":["pipe.es6"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;oBAEc,MAAM;;kBACF,IAAI;;oBAChB,MAAM;;qBAEsB,SAAS;;mBACxC,OAAO;;;;AAEvB,IAAM,WAAW,GAAG,UALZ,IAAI,EAKa,SAAS,EAAE,gBAAgB,CAAC,CAAC;;AAEtD,IAAI,OAAO,GAAG,SAAV,OAAO,CAAI,GAAG,EAAE,GAAG,EAAK,EAE3B,CAAC;;AAEF,IAAI,iBAAiB,GAAG,SAApB,iBAAiB,CAAI,OAAO,EAAK;AACjC,WAAO,CAAC,OAAO,CAAC,UAAC,MAAM,EAAK,EAE3B,CAAC,CAAC;CACN,CAAC;;AAEF,IAAI,UAAU,GAAG,SAAb,UAAU,CAAI,MAAM,EAAK;QACpB,OAAO,GAAI,MAAM,CAAjB,OAAO;;AAEZ,QAAI,CAAC,OAAO,EAAE;AAAC,eAAO;KAAC;;AAEvB,qBAAiB,CAAC,OAAO,CAAC,CAAC;CAC9B,CAAC;;AAEF,IAAI,WAAW,GAAG,SAAd,WAAW,CAAI,GAAG,EAAE,IAAI,EAAK;AAC7B,QAAI,GAAG,EAAE;AAAC,eAAO;KAAC;;AAElB,QAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;;AAE9B,cAAU,CAAC,MAAM,CAAC,CAAC;CACtB,CAAC;;AAEF,IAAI,cAAc,GAAG,SAAjB,cAAc,CAAI,SAAS,EAAK;AAChC,QAAI,CAAC,SAAS,EAAE;AAAC,eAAO;KAAC;;AAEzB,YArCY,QAAQ,EAqCX,WAAW,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,EAAE,WAAW,CAAC,CAAC;CAC1D,CAAC;;AAEF,QAxCQ,MAAM,EAwCP,WAAW,EAAE,cAAc,EAAE,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AA0BtC,IAAI,IAAI,GAAG,WA/DH,gBAAgB,EA+DA,UAAC,IAAI,EAAK;AAC9B,0BAAI,uBAAuB,EAAE,IAAI,CAAC,CAAC;CACtC,CAAC,CAAC","file":"pipe.js","sourcesContent":["'use strict';\n\nimport {createServer} from 'http';\nimport {exists, readFile} from 'fs';\nimport {join} from 'path';\n\nimport {createPullSocket as createSocket} from './queue';\nimport log from './log';\n\nconst CONFIG_PATH = join(__dirname, '../config.json');\n\nlet handler = (req, res) => {\n\n};\n\nlet initializeSockets = (targets) => {\n    targets.forEach((target) => {\n\n    });\n};\n\nlet initialize = (config) => {\n    let {targets} = config;\n\n    if (!targets) {return;}\n\n    initializeSockets(targets);\n};\n\nlet processJson = (err, data) => {\n    if (err) {return;}\n\n    let config = JSON.parse(data);\n\n    initialize(config);\n};\n\nlet checkExistence = (available) => {\n    if (!available) {return;}\n\n    readFile(CONFIG_PATH, {encoding: 'utf8'}, processJson);\n};\n\nexists(CONFIG_PATH, checkExistence());\n\n\n// targets: channels\n//\n// /dashboards/hello\n// /dashboards/world\n// /dashboards/all\n\n// TODO: creating a single socket server will mean pushing the data of all\n// the job to everybody through HTTP, that's not ideal. Find a better way.\n// use socket.io namespaces probably as it's the easiest to implement.\n\n// TODO: hack on a documentation generator project.\n// why?\n// javadoc style documentation is not good enough for javascript.\n// the best documentation should be inline with the source code; however\n// no one wants to read the private parts of the source in the docs.\n// so make a parser that reads the file, and creates markdown doc files\n// between delimeters like <!--begindoc--> <!--enddoc--> for instance.\n// the app should be able to parse  @param tags into a nicely laid out\n// definition list, and it should consider all documentation comments\n// as markdown.\n\n// TODO: something reads the config json and creates the /public folder.\n\nlet sock = createSocket((data) => {\n    log('SOCKET: incoming data', data);\n});\n\n//let handler = (req, res) => {\n//\n//};\n"]}