{"version":3,"sources":["queue.es6"],"names":[],"mappings":";AAAA,gBAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBb,QAAM,YAAY,GAAG,iBAAiB,CAAC;AACvC,QAAM,IAAI,GAAG,IAAI,CAAC;AAClB,QAAM,SAAS,GAAG,qBAAqB,CAAC;AACxC,QAAM,GAAG,GAAM,YAAY,SAAI,IAAI,AAAE,CAAC;;AAEtC,QAAI,gBAAgB,GAAG,SAAnB,gBAAgB,CAAI,cAAc,EAAK;AACvC,YAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,YAAI,OAAO,GAAG,SAAV,OAAO,CAAI,IAAI,EAAK;AACpB,0BAAc,CAAC,IAAI,CAAC,CAAC;SACxB,CAAC;;AAEF,YAAI,WAAU,GAAG,SAAb,WAAU,GAAS;AACnB,gBAAI,CAAC,IAAI,EAAE;AAAC,uBAAO;aAAC;;AAEpB,gBAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,gBAAI,CAAC,MAAM,EAAE,CAAC;AACd,gBAAI,GAAG,IAAI,CAAC;SACf,CAAC;;AAEF,YAAI,QAAO,GAAG,SAAV,QAAO,GAAS;AAChB,gBAAI,GAAG,iBAAI,MAAM,CAAC,KAAK,CAAC,CAAC;;AAEzB,gBAAI,CAAC,IAAI,EAAE;AAAC,uBAAO;aAAC;;AAEpB,gBAAI,CAAC,IAAI,CAAC,GAAG,EAAE,UAAC,GAAG,EAAK;AACpB,oBAAI,GAAG,EAAE;AAAC,wBAAI,GAAG,IAAI,CAAC;iBAAC;;AAEvB,oBAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;aAC7B,CAAC,CAAC;SACN,CAAC;;AAEF,YAAI,MAAM,GAAG,SAAT,MAAM,GAAS;AACf,gBAAI,CAAC,IAAI,EAAE;AAAC,uBAAO;aAAC;;AAEpB,gBAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,GAAG,EAAK;AAAC,qBAAK,GAAG,CAAC;aAAC,CAAC,CAAC;AACvC,gBAAI,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,KAAK,EAAE,OAAO,EAAK;AAAC,uBAAO,CAAC,OAAO,CAAC,CAAC;aAAC,CAAC,CAAC;SAC/D,CAAC;;AAEF,gBAAO,EAAE,CAAC;AACV,cAAM,EAAE,CAAC;;AAET,uFAA2D,IAAI,OAAI,CAAC;;AAEpE,eAAO;AACH,sBAAU,EAAE,sBAAM;AAAC,2BAAU,EAAE,CAAC;aAAC;AACjC,mBAAO,EAAE,mBAAM;AACX,wBAAO,EAAE,CAAC;AACV,sBAAM,EAAE,CAAC;aACZ;SACJ,CAAC;KACL,CAAC;;AAEF,QAAI,gBAAgB,GAAG,SAAnB,gBAAgB,GAAS;AACzB,YAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,YAAI,SAAO,GAAG,SAAV,SAAO,GAAS;AAChB,gBAAI,GAAG,iBAAI,MAAM,CAAC,KAAK,CAAC,CAAC;;AAEzB,gBAAI,CAAC,IAAI,EAAE;AAAC,uBAAO;aAAC;;AAEpB,gBAAI,CAAC,OAAO,CAAC,GAAG,EAAE,UAAC,GAAG,EAAK;AACvB,oBAAI,GAAG,EAAE;AACL,wBAAI,GAAG,IAAI,CAAC;iBACf;aACJ,CAAC,CAAC;SACN,CAAC;;AAEF,YAAI,YAAU,GAAG,SAAb,YAAU,GAAS;AACnB,gBAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,gBAAI,CAAC,UAAU,EAAE,CAAC;AAClB,gBAAI,GAAG,IAAI,CAAC;SACf,CAAC;;AAEF,YAAI,MAAM,GAAG,SAAT,MAAM,GAAS;AACf,gBAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,GAAG,EAAK;AAAC,qBAAK,GAAG,CAAC;aAAC,CAAC,CAAC;SAC1C,CAAC;;AAEF,iBAAO,EAAE,CAAC;AACV,cAAM,EAAE,CAAC;;AAET,uFAA2D,IAAI,OAAI,CAAC;;AAEpE,eAAO;AACH,gBAAI,EAAE,cAAC,IAAI,EAAK;AACZ,oBAAI,CAAC,IAAI,EAAE;AAAC,2BAAO;iBAAC;;AAEpB,oBAAI,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAChD;AACD,mBAAO,EAAE,mBAAM;AACX,yBAAO,EAAE,CAAC;AACV,sBAAM,EAAE,CAAC;aACZ;AACD,sBAAU,EAAE,sBAAM;AACd,4BAAU,EAAE,CAAC;aAChB;SACJ,CAAC;KACL,CAAC;;YAEM,gBAAgB,GAAhB,gBAAgB;YAAE,gBAAgB,GAAhB,gBAAgB","file":"queue.amd.js","sourcesContent":["'use strict';\n\n/*\n *  ______                     _________\n *  ___  /_____________ _____________  /\n *  __  __ \\  __ \\  __ `/_  ___/  __  /\n *  _  /_/ / /_/ / /_/ /_  /   / /_/ /\n *  /_.___/\\____/\\__,_/ /_/    \\__,_/\n *      a minimalist dashboard and monitoring solution.\n *\n * This program is distributed under the terms of the MIT license.\n * Please see `LICENSE.md` file for details.\n *\n * Send your comments and suggestions toâ€¦\n * <https://github.com/v0lkan/board/issues>\n */\n\nimport zmq from 'zmq';\n\nimport log from './log';\n\nconst TCP_ENDPOINT = 'tcp://127.0.0.1';\nconst PORT = 4243;\nconst TRANSPORT = 'dashboard-transport';\nconst URL = `${TCP_ENDPOINT}:${PORT}`;\n\nlet createPullSocket = (messageHandler) => {\n    let sock = null;\n\n    let handler = (data) => {\n        messageHandler(data);\n    };\n\n    let disconnect = () => {\n        if (!sock) {return;}\n\n        sock.removeAllListeners();\n        sock.unbind();\n        sock = null;\n    };\n\n    let connect = () => {\n        sock = zmq.socket('sub');\n\n        if (!sock) {return;}\n\n        sock.bind(URL, (err) => {\n            if (err) {sock = null;}\n\n            sock.subscribe(TRANSPORT);\n        });\n    };\n\n    let listen = () => {\n        if (!sock) {return;}\n\n        sock.on('error', (err) => {void err;});\n        sock.on('message', (topic, message) => {handler(message);});\n    };\n\n    connect();\n    listen();\n\n    log(`Board:: Message bus [PULL] socket connected to port ${PORT}.`);\n\n    return {\n        disconnect: () => {disconnect();},\n        connect: () => {\n            connect();\n            listen();\n        }\n    };\n};\n\nlet createPushSocket = () => {\n    let sock = null;\n\n    let connect = () => {\n        sock = zmq.socket('pub');\n\n        if (!sock) {return;}\n\n        sock.connect(URL, (err) => {\n            if (err) {\n                sock = null;\n            }\n        });\n    };\n\n    let disconnect = () => {\n        sock.removeAllListeners();\n        sock.disconnect();\n        sock = null;\n    };\n\n    let listen = () => {\n        sock.on('error', (err) => {void err;});\n    };\n\n    connect();\n    listen();\n\n    log(`Board:: Message bus [PUSH] socket connected to port ${PORT}.`);\n\n    return {\n        send: (data) => {\n            if (!sock) {return;}\n\n            sock.send([TRANSPORT, JSON.stringify(data)]);\n        },\n        connect: () => {\n            connect();\n            listen();\n        },\n        disconnect: () => {\n            disconnect();\n        }\n    };\n};\n\nexport {createPullSocket, createPushSocket};\n"]}