{"version":3,"sources":["pipe.es6"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;oBAyBc,MAAM;;wBAChB,WAAW;;;;mBACZ,KAAK;;;;sBAEL,WAAW;;;;AAT3B,IAAM,OAAO,GAAG,IAAI,CAAC;AACrB,IAAM,MAAM,GAAG,IAAI,CAAC;AACpB,IAAM,EAAE,GAAG,IAAI,CAAC;AAChB,IAAM,YAAY,GAAG,GAAG,CAAC;;AAQzB,IAAI,GAAG,GAAG,UANF,YAAY,EAMG,UAAC,GAAG,EAAE,GAAG,EAAK;AACjC,KAAG,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AAC5B,KAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;CACf,CAAC,CAAC;;AAEH,IAAI,EAAE,GAAG,2BAAK,GAAG,CAAC,CAAC;;AAEnB,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;;AAEpB,gEAAwC,OAAO,SAAK,CAAC;;AAErD,IAAI,IAAI,GAAG,iBAAI,MAAM,CAAC,MAAM,CAAC,CAAC;;AAE9B,IAAI,CAAC,OAAO,sBAAoB,MAAM,CAAG,CAAC;;AAE1C,yBAAI,uCAAuC,CAAC,CAAC;;AAE7C,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,UAAS,GAAG,EAAC;AAC5B,2BAAI,UAAU,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;CACnC,CAAC,CAAC","file":"pipe.js","sourcesContent":["'use strict';\n\n/*\n * board â€” A minimalist dashboard and monitoring solution.\n *\n * This program is distributed under the terms of the MIT license.\n * Please see the LICENSE.md.md file for details.\n */\n\n// TODO: find something that parses these doc tags and creates documentation.\n// or at least after finishing the project, thing about whether inline\n// documentation is sufficient or not.\n\n/**\n * ## Pipe ##\n *\n * Pipe is a WebSocket server that consumes messages from the running jobs and\n * dispatches them to the registered clients.\n */\n\nconst IO_PORT = 4242;\nconst Q_PORT = 4243;\nconst OK = 'OK';\nconst HTTP_SUCCESS = 200;\n\nimport {createServer} from 'http';\nimport bind from 'socket.io';\nimport zmq from 'zmq';\n\nimport log from './lib/log';\n\nlet app = createServer((req, res) => {\n    res.writeHead(HTTP_SUCCESS);\n    res.end(OK);\n});\n\nlet io = bind(app);\n\napp.listen(IO_PORT);\n\nlog(`Board:: Pipe is running at port '${IO_PORT}'.`);\n\nlet sock = zmq.socket('pull');\n\nsock.connect(`tcp://127.0.0.1:${Q_PORT}`);\n\nlog('Board:: Worker connected to port 3000');\n\nsock.on('message', function(msg){\n    log('work: %s', msg.toString());\n});\n"]}