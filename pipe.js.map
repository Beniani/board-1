{"version":3,"sources":["pipe.es6"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;oBAyBc,MAAM;;wBAChB,WAAW;;;;sBAEZ,WAAW;;;;AAR3B,IAAM,OAAO,GAAG,IAAI,CAAC;;AAErB,IAAM,EAAE,GAAG,IAAI,CAAC;AAChB,IAAM,YAAY,GAAG,GAAG,CAAC;;AAOzB,IAAI,GAAG,GAAG,UALF,YAAY,EAKG,UAAC,GAAG,EAAE,GAAG,EAAK;AACjC,KAAG,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AAC5B,KAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;CACf,CAAC,CAAC;;;;;;AAMH,IAAI,EAAE,GAAG,2BAAK,GAAG,CAAC,CAAC;;AAEnB,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;;AAEpB,gEAAwC,OAAO,SAAK,CAAC","file":"pipe.js","sourcesContent":["'use strict';\n\n/*\n * board â€” A minimalist dashboard and monitoring solution.\n *\n * This program is distributed under the terms of the MIT license.\n * Please see the LICENSE.md.md file for details.\n */\n\n// TODO: find something that parses these doc tags and creates documentation.\n// or at least after finishing the project, thing about whether inline\n// documentation is sufficient or not.\n\n/**\n * ## Pipe\n *\n * Pipe is a WebSocket server that consumes messages from the running jobs and\n * dispatches them to the registered clients.\n */\n\nconst IO_PORT = 4242;\n\nconst OK = 'OK';\nconst HTTP_SUCCESS = 200;\n\nimport {createServer} from 'http';\nimport bind from 'socket.io';\n\nimport log from './lib/log';\n\nlet app = createServer((req, res) => {\n    res.writeHead(HTTP_SUCCESS);\n    res.end(OK);\n});\n\n// TODO:\n// Google representatives have videos on youtubes describing the inner\n// workings of chrome itself (like when it switches from a linkedlist array to a fixed array, etc), and how to optimize them. See GDC 2012: From Console to Chrome for more.\n\nlet io = bind(app);\n\napp.listen(IO_PORT);\n\nlog(`Board:: Pipe is running at port '${IO_PORT}'.`);\n"]}